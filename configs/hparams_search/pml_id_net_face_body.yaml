# @package _global_

# python train.py -m hparams_search=comics experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/mean_average_precision_at_r"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 100

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyperparameters
    search_space:
      model.id_latent_dim:
        type: categorical
        choices: [ 64, 128, 256, 512 ]
      model.ssl_backbone_face:
        type: categorical
        choices: [SIM_CLR,  SIM_CLR_DEEPER_LAST]
      model.ssl_backbone_body:
        type: categorical
        choices: [ SIM_CLR,  SIM_CLR_DEEPER_LAST ]
      model.pml_setup_v:
        type: categorical
        choices: [ 3,  7 ]
      model.fusion_strategy:
        type: categorical
        choices: [cat, sum, favor_body, favor_face ]
      model.lr:
        type: float
        low: 0.0001
        high: 0.001
      model.weight_decay:
        type: float
        low: 0.01
        high: 0.1
      datamodule.intense_transform:
        type: categorical
        choices: [ True, False ]
      datamodule.no_transform:
        type: categorical
        choices: [ True, False ]
      datamodule.randomly_mask_face_or_body:
        type: float
        low: 0.0
        high: 0.5

